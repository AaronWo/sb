package com.haosu.schedulebook;

import android.database.Cursor;
import android.os.AsyncTask;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;

import com.haosu.schedulebook.db.XUtil;
import com.haosu.schedulebook.model.StaticItem;

import org.xutils.DbManager;
import org.xutils.x;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import lecho.lib.hellocharts.gesture.ContainerScrollType;
import lecho.lib.hellocharts.gesture.ZoomType;
import lecho.lib.hellocharts.listener.ViewportChangeListener;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.model.Viewport;
import lecho.lib.hellocharts.util.ChartUtils;
import lecho.lib.hellocharts.view.LineChartView;
import lecho.lib.hellocharts.view.PreviewLineChartView;

/**
 * Created by haosu on 2016/4/23.
 */
public class StaticActivity extends BaseActivity {

    private Toolbar toolbar;
    private LineChartView lineChartView;
    private LineChartData lineChartData = new LineChartData();
    private LineChartData previewData = new LineChartData();
    private PreviewLineChartView previewLineChartView;

    @Override
    public void initWidgt() {
        setContentView(R.layout.static_layout);

        toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        lineChartView = (LineChartView) findViewById(R.id.static_line_char);
        lineChartView.setInteractive(false);
        lineChartView.setZoomEnabled(false);
        lineChartView.setLineChartData(lineChartData);

        previewLineChartView = (PreviewLineChartView) findViewById(R.id.chart_preview);
        previewLineChartView.setLineChartData(previewData);
        previewLineChartView.setViewportChangeListener(new ViewportListener());
        previewX(false);

    }

    @Override
    public void initData() {
        new StaticTask().execute();
    }


    private void initChartData(List<StaticItem> items) {
        List<PointValue> values = new ArrayList<>();
        List<AxisValue> axisValues = new ArrayList<>();
        List<PointValue> finishValues = new ArrayList<>();

        int i = 0;
        for (StaticItem item : items) {
            values.add(new PointValue(i, item.getTotalCount()));
            finishValues.add(new PointValue(i, item.getFinishCount()));
            axisValues.add(new AxisValue(i).setLabel(item.getDate()));
            i++;
        }
        lineChartData = new LineChartData();
        Line line = new Line(values).setColor(ChartUtils.pickColor()).setCubic(false);
        Line finishLine = new Line(finishValues).setColor(ChartUtils.pickColor()).setCubic(false);
        List<Line> lines = new ArrayList<>();
        lines.add(line);
        lines.add(finishLine);
        lineChartData.setLines(lines);

        //坐标轴
        Axis axisX = new Axis(); //X轴
        axisX.setHasTiltedLabels(false).setHasLines(true).setMaxLabelChars(10).setValues(axisValues).setName("Detail");
        lineChartData.setAxisXBottom(axisX);

        Axis axisY = new Axis().setAutoGenerated(true).setHasLines(true);  //Y轴
        lineChartData.setAxisYLeft(axisY);


        //设置行为属性，支持缩放、滑动以及平移
        lineChartView.setInteractive(true);
        lineChartView.setZoomType(ZoomType.HORIZONTAL);
        lineChartView.setContainerScrollEnabled(true, ContainerScrollType.HORIZONTAL);
        lineChartView.setLineChartData(lineChartData);
        lineChartView.setVisibility(View.VISIBLE);


        previewData = new LineChartData(lineChartData);
        previewData.getAxisXBottom().setName("History");
        for (int l = 0; l < previewData.getLines().size(); l++) {
            previewData.getLines().get(l).setColor(ChartUtils.DEFAULT_DARKEN_COLOR);
        }

        lineChartView.setLineChartData(lineChartData);
        previewLineChartView.setLineChartData(previewData);

    }


    private void previewX(boolean animate) {
        Viewport tempViewport = new Viewport(lineChartView.getMaximumViewport());
        float dx = tempViewport.width() / 4;
        tempViewport.inset(dx, 0);
        if (animate) {
            previewLineChartView.setCurrentViewportWithAnimation(tempViewport);
        } else {
            previewLineChartView.setCurrentViewport(tempViewport);
        }
        previewLineChartView.setZoomType(ZoomType.HORIZONTAL);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                this.finish();
                return true;
        }
        return super.onOptionsItemSelected(item);
    }

    private class ViewportListener implements ViewportChangeListener {

        @Override
        public void onViewportChanged(final Viewport viewport) {
            final Viewport v = new Viewport(viewport);
            v.top++;
            v.bottom = v.bottom - 1 > 0 ? v.bottom - 1 : 0;
            lineChartView.setCurrentViewport(v);
            lineChartView.setMaximumViewport(v);
            Log.d(this.getClass().getSimpleName(), viewport.top + "  " + viewport.bottom);
        }
    }

    class StaticTask extends AsyncTask<Void, Void, Void> {


        Map<String, StaticItem> map = new HashMap<>();

        @Override
        protected Void doInBackground(Void... params) {
            try {
                DbManager.DaoConfig daoConfig = XUtil.getDaoConfig();
                DbManager db = x.getDb(daoConfig);
                final String sql = "select date, count(*) from schedule_item group by date";
                Cursor cursor = db.execQuery(sql);
                while (cursor.moveToNext()) {
                    String date = cursor.getString(0);
                    int count = cursor.getInt(1);
                    StaticItem item = new StaticItem();
                    item.setDate(date);
                    item.setTotalCount(count);
                    map.put(date, item);
                }

                final String finishSql = "select date, count(*) from schedule_item where finish = 1 group by date";
                cursor = db.execQuery(finishSql);
                while (cursor.moveToNext()) {
                    String date = cursor.getString(0);
                    int count = cursor.getInt(1);
                    StaticItem item = null;
                    if (map.containsKey(date)) {
                        item = map.get(date);
                    } else {
                        item = new StaticItem();
                    }
                    item.setDate(date);
                    item.setFinishCount(count);
                    map.put(date, item);
                }
            } catch (Exception e) {
                Log.e(this.getClass().getSimpleName(), e.getMessage());
            }
            return null;
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            super.onPostExecute(aVoid);
            initChartData(StaticItem.sort(new ArrayList<>(map.values())));
        }
    }

}
